apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    defaultConfig {
        applicationId rootProject.ext.android["applicationId"]
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
        vectorDrawables.useSupportLibrary = true

        multiDexEnabled true

        //ARouter添加的
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }

        //定义网络请求成功返回码 baseurl  日志打印  切换环境  在代码中BuildConfig.BASE_URL去使用
        buildConfigField "String", "CODE_SUCCESS", getCodeSuccess()
        buildConfigField "String", "CODELIST_SUCCESS", getCodeListSuccess()
        buildConfigField "String", "BASE_URL", getBaseUrl()
        buildConfigField "boolean", "OPEN_LOG", getOpenLog()
        buildConfigField "boolean", "OPEN_CHANGE", getOpenChange()
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    configurations.all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            def requested = details.requested
            if (requested.group == 'com.android.support') {
                if (!requested.name.startsWith("multidex")) {
                    details.useVersion '28.0.0'
                }
            }
        }
    }

}

def getOpenLog() {
    return "${OPEN_LOG}"
}

def getOpenChange() {
    return "${OPEN_CHANGE}"
}

def getBaseUrl() {
    //最后没有斜杠，需要手动拼接
    return "\"" + String.valueOf(BASE_URL).trim() + "/\""
}

def getCodeSuccess() {
    return "\"" + String.valueOf(CODE_SUCCESS)+ "\""
}

def getCodeListSuccess() {
    return "\"" + String.valueOf(CODELIST_SUCCESS)+ "\""
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    //constraint-layout
    api rootProject.ext.dependencies["constraint-layout"]
    //multidex
    api rootProject.ext.dependencies["multidex"]
    //hulk引入
//    api project(':hulk')
    api 'com.madreain:hulk:0.0.2'
    //dagger2
    annotationProcessor rootProject.ext.dependencies["dagger2-compiler"]
    annotationProcessor rootProject.ext.dependencies["dagger2-android-processor"]
    //butterknife
    api rootProject.ext.dependencies["butterknife"]
    annotationProcessor rootProject.ext.dependencies["butterknife-compiler"]
    //arouter
    annotationProcessor rootProject.ext.dependencies["arouter-compiler"]
}
